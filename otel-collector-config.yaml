receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317 # For traces and metrics from Flask app (SDK)
      http:
        endpoint: 0.0.0.0:4318 # Alternative for traces, metrics, logs

processors:
  batch: {} # Batches data for more efficient export
  # memory_limiter: # Optional: helps prevent out-of-memory issues
  #   check_interval: 1s
  #   limit_percentage: 75
  #   spike_limit_percentage: 15

exporters:
  logging: # For debugging: prints telemetry data to collector's console
    loglevel: debug

  prometheus: # Exports metrics to a Prometheus scrape endpoint
    endpoint: "0.0.0.0:8889"
    # namespace: "otel" # Optional: prefix for metrics

  loki: # Exports logs to Loki
    endpoint: "http://loki:3100/loki/api/v1/push"
    # tenant_id: "example-tenant" # If multi-tenancy is used in Loki
    # default_labels_enabled:
    #   exporter: true
    #   job: true
    #   instance: true
    #   level: true
    # attributes:
    #   resource:
    #     "service.name": "app_service_name" # maps OTel resource attribute to Loki label
    #   record:
    #     "trace_id": "traceid" # maps OTel log record attribute to Loki label
    #     "span_id": "spanid"   # maps OTel log record attribute to Loki label
    # format: json # Ensure logs are sent in a format Loki can parse easily if not using default.

  otlp/jaeger: # Exports traces to Jaeger via OTLP
    endpoint: "jaeger:4317" # Jaeger's OTLP gRPC receiver
    tls:
      insecure: true

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, otlp/jaeger]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, prometheus]
    logs:
      receivers: [otlp] # Note: Flask app currently uses stdout logging.
                       # This receiver is ready if app.py is changed to use OTLPLogExporter.
                       # For now, Loki will get logs via Promtail/Docker logging driver if not through OTel.
                       # However, the project summary says "Loki: Exports OTLP-received logs",
                       # implying the intent is to send logs from app -> collector -> Loki.
                       # For this to work, app.py needs OTLPLogExporter or Collector needs a filelog receiver
                       # if app logs to a file that Collector can read.
                       # Assuming OTLP logs for now as per summary.
      processors: [batch]
      exporters: [logging, loki]