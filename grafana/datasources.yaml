apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    jsonData:
      timeInterval: "15s"
    version: 1
    editable: true

  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
    jsonData:
      derivedFields: # For Log -> Trace correlation
        - datasourceUid: 'jaeger' # Use 'jaeger' (the name of Jaeger datasource below) or its UID if known
          matcherRegex: '"?trace_id"?\s*:\s*"(\w+)"' # Matches trace_id in JSON logs
          name: 'traceID'
          url: 'http://localhost:16686/trace/${__value.raw}' # Link to Jaeger UI (Grafana runs on localhost from browser's perspective)
          # If Grafana is not on localhost or Jaeger has a different external URL, adjust this.
          # For internal linking (e.g., if Jaeger datasource handles this), use:
          # internalLink: true 
          # datasourceName: Jaeger # (or UID) - this might not be needed if datasourceUid is set
      maxLines: 1000
    version: 1
    editable: true

  - name: Jaeger
    type: jaeger
    access: proxy
    url: http://jaeger:16686 # Jaeger Query frontend
    jsonData:
      tracesToLogs: # For Trace -> Log correlation
        datasourceUid: 'loki' # Use 'loki' (name of Loki datasource above) or its UID
        tags: ['ip', 'hostname', 'service.name'] # Tags to use for Loki query
        # Example filter: 'instance="{instance}",service.name="{service.name}"'
        # Adjust based on available Loki labels. The OpenTelemetry resource attributes (like service.name)
        # and log record attributes (like trace_id, span_id if exported as labels to Loki by the Collector)
        # are key here.
        # The Loki exporter in otel-collector-config.yaml should be configured to add these as labels.
        # For example, if 'trace_id' is a label in Loki:
        filterByTraceID: true # Link from trace to logs with same traceID
        # filterBySpanID: true # Optionally filter by spanID too
        # query: '{job="${__tags["job"]}", instance="${__tags["instance"]}"}' # Example Loki query structure
        # query: '{service_name="${__tags["service.name"]}"}' # Simpler query if service.name is a label
        # query: '{trace_id="${__trace.id}"}' # Simplest if trace_id is a label in Loki
        # Using the span's service name and the trace ID for lookup.
        # This assumes 'service.name' is available as a tag from the trace and 'trace_id' is queryable in Loki.
        lokiSearch: true # Enable trace to logs with Loki
        # Optional: Define how tags are mapped to Loki labels
        # mapTagNamesEnabled: true
        # mapTagNames:
        #   - from: "service.name"
        #     to: "app_service_name" # if Loki label is app_service_name
    version: 1
    editable: true