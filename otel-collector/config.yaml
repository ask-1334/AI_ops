# otel-collector/config.yaml
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14317
      http:
        endpoint: 0.0.0.0:14318

processors:
  batch: # Batches traces, metrics, and logs for more efficient export
    timeout: 1s
    send_batch_size: 1024

exporters:
  logging: # Useful for debugging the collector itself
    loglevel: debug 
  
  prometheus: # Exports metrics to Prometheus
    endpoint: 0.0.0.0:8889 # Collector exposes metrics on this port for Prometheus to scrape
    namespace: flask_app
    send_timestamps: true
    metric_expiration: 180m
    # resource_to_telemetry_conversion: true # This was commented out, keeping as is
  
  loki: # Exports logs to Loki
    endpoint: http://loki:3100/loki/api/v1/push
    format: json
  
  # Changed from otlp/tempo to otlp, pointing to Jaeger's OTLP gRPC port
  otlp/jaeger: 
    endpoint: jaeger:14250 # Jaeger's OTLP gRPC receiver
    tls:
      insecure: true # Assuming Jaeger is on the same network and TLS is not required

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      # Updated exporter to otlp/jaeger
      exporters: [logging, otlp/jaeger] 
    
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, prometheus]
    
    logs:
      receivers: [otlp] # Assuming logs are sent via OTLP to the collector
                       # If Flask app logs directly or via another mechanism, this might differ.
                       # The provided app.py uses standard Python logging, not OTLP for logs.
                       # For OTLP logs, app.py would need OTLPLogExporter setup.
                       # If logs are not sent via OTLP, this pipeline might not receive them.
                       # However, Loki can also scrape logs or receive them via other forwarders.
                       # For this setup, we'll assume OTLP logs might be configured in the future.
      processors: [batch]
      exporters: [logging, loki]
